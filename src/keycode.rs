use core::ops::RangeBounds;

use defmt::Format;
use num_enum::FromPrimitive;

#[derive(Copy, Clone, PartialEq, Eq, FromPrimitive, Debug, Format)]
#[repr(u16)]
pub enum KeyCode {
    #[num_enum(default)]
    None = 0x0000,
    ErrorRollover = 0x0001,
    PostFail = 0x0002,
    ErrorUndefined = 0x0003,

    // Keyboard:
    KeyA = 0x0004,
    KeyB = 0x0005,
    KeyC = 0x0006,
    KeyD = 0x0007,
    KeyE = 0x0008,
    KeyF = 0x0009,
    KeyG = 0x000A,
    KeyH = 0x000B,
    KeyI = 0x000C,
    KeyJ = 0x000D,
    KeyK = 0x000E,
    KeyL = 0x000F,
    KeyM = 0x0010,
    KeyN = 0x0011,
    KeyO = 0x0012,
    KeyP = 0x0013,
    KeyQ = 0x0014,
    KeyR = 0x0015,
    KeyS = 0x0016,
    KeyT = 0x0017,
    KeyU = 0x0018,
    KeyV = 0x0019,
    KeyW = 0x001A,
    KeyX = 0x001B,
    KeyY = 0x001C,
    KeyZ = 0x001D,
    Key1 = 0x001E,
    Key2 = 0x001F,
    Key3 = 0x0020,
    Key4 = 0x0021,
    Key5 = 0x0022,
    Key6 = 0x0023,
    Key7 = 0x0024,
    Key8 = 0x0025,
    Key9 = 0x0026,
    Key0 = 0x0027,
    KeyEnter = 0x0028,
    KeyEscape = 0x0029,
    KeyBackspace = 0x002A,
    KeyTab = 0x002B,
    KeySpace = 0x002C,
    KeyMinus = 0x002D,
    KeyEqual = 0x002E,
    KeyLeftBrace = 0x002F,
    KeyRightBrace = 0x0030,
    KeyBackslash = 0x0031,
    KeyNonUSHashTilde = 0x0032,
    KeySemicolon = 0x0033,
    KeyApostrophe = 0x0034,
    KeyGrave = 0x0035,
    KeyComma = 0x0036,
    KeyDot = 0x0037,
    KeySlash = 0x0038,
    KeyCapsLock = 0x0039,
    KeyF1 = 0x003A,
    KeyF2 = 0x003B,
    KeyF3 = 0x003C,
    KeyF4 = 0x003D,
    KeyF5 = 0x003E,
    KeyF6 = 0x003F,
    KeyF7 = 0x0040,
    KeyF8 = 0x0041,
    KeyF9 = 0x0042,
    KeyF10 = 0x0043,
    KeyF11 = 0x0044,
    KeyF12 = 0x0045,
    KeyPrintScreen = 0x0046,
    KeyScrollLock = 0x0047,
    KeyPause = 0x0048,
    KeyInsert = 0x0049,
    KeyHome = 0x004A,
    KeyPageUp = 0x004B,
    KeyDelete = 0x004C,
    KeyEnd = 0x004D,
    KeyPageDown = 0x004E,
    KeyRight = 0x004F,
    KeyLeft = 0x0050,
    KeyDown = 0x0051,
    KeyUp = 0x0052,
    KeypadLock = 0x0053,
    KeypadSlash = 0x0054,
    KeypadAsterisk = 0x0055,
    KeypadMinus = 0x0056,
    KeypadPlus = 0x0057,
    KeypadEnter = 0x0058,
    Keypad1 = 0x0059,
    Keypad2 = 0x005A,
    Keypad3 = 0x005B,
    Keypad4 = 0x005C,
    Keypad5 = 0x005D,
    Keypad6 = 0x005E,
    Keypad7 = 0x005F,
    Keypad8 = 0x0060,
    Keypad9 = 0x0061,
    Keypad0 = 0x0062,
    KeypadDot = 0x0063,
    KeyNonUSBackslash = 0x0064,
    KeyApplication = 0x0065,
    KeyPower = 0x0066,
    KeypadEqual = 0x0067,

    KeyF14 = 0x0069,
    KeyF13 = 0x0068,
    KeyF15 = 0x006A,
    KeyF16 = 0x006B,
    KeyF17 = 0x006C,
    KeyF18 = 0x006D,
    KeyF19 = 0x006E,
    KeyF20 = 0x006F,
    KeyF21 = 0x0070,
    KeyF22 = 0x0071,
    KeyF23 = 0x0072,
    KeyF24 = 0x0073,

    KeyExecute = 0x74,
    KeyHelp = 0x75,
    KeyMenu = 0x76,
    KeySelect = 0x77,
    KeyStop = 0x78,
    KeyAgain = 0x79,
    KeyUndo = 0x7a,
    KeyCut = 0x7b,
    KeyCopy = 0x7c,
    KeyPaste = 0x7d,
    KeyFind = 0x7e,
    KeyMute = 0x7f,
    KeyVolumeUp = 0x80,
    KeyVolumeDown = 0x81,

    KeyLeftCtrl = 0xe0,
    KeyLeftShift = 0xe1,
    KeyLeftAlt = 0xe2,
    KeyLeftGUI = 0xe3,
    KeyRightCtrl = 0xe4,
    KeyRightShift = 0xe5,
    KeyRightAlt = 0xe6,
    KeyRightGUI = 0xe7,
    // KeyMediaPlayPause = 0xe8,
    // KeyMediaStopCD = 0xe9,
    // KeyMediaPreviousSong = 0xea,
    // KeyMediaNextSong = 0xeb,
    // KeyMediaEjectCD = 0xec,
    // KeyMediaVolumeUp = 0xed,
    // KeyMediaVolumeDown = 0xee,
    // KeyMediaMute = 0xef,
    // KeyMediaWWW = 0xf0,
    // KeyMediaBack = 0xf1,
    // KeyMediaForward = 0xf2,
    // KeyMediaStop = 0xf3,
    // KeyMediaFind = 0xf4,
    // KeyMediaScrollUp = 0xf5,
    // KeyMediaScrollDown = 0xf6,
    // KeyMediaEdit = 0xf7,
    // KeyMediaSleep = 0xf8,
    // KeyMediaCoffee = 0xf9,
    // KeyMediaRefresh = 0xfa,
    // KeyMediaCalc = 0xfb,
}

impl KeyCode {
    /// Returns `true` if the keycode is basic keycode
    pub fn is_basic(self) -> bool {
        (KeyCode::None as u8..=KeyCode::KeyRightGUI as u8).contains(&(self as u8))
    }

    /// Returns `true` if the keycode is a modifier keycode
    pub fn is_modifier(self) -> bool {
        (KeyCode::KeyLeftCtrl as u8..=KeyCode::KeyRightGUI as u8).contains(&(self as u8))
    }

    pub fn as_modifier_mask(self) -> u8 {
        if self.is_modifier() {
            1 << (self as u8 - KeyCode::KeyLeftCtrl as u8)
        } else {
            0
        }
    }
}
